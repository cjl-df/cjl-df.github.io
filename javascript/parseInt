### 源于面试题['1','2','3'].map(parseInt)

#### 一、语法

`parseInt(string, radix);`

- 参数

  - string
    要被解析的值。如果参数不是一个字符串，则将其转换为字符串(使用 ToString 抽象操作)。字符串开头的空白符将会被忽略。
  - radix
    一个介于 2 和 36 之间的整数(数学系统的基础)，表示上述字符串的基数。比如参数 10 表示使用十进制数值系统。始终指定此参数可以消除阅读该代码时的困惑并且保证转换结果可预测。当未指定基数时，不同的实现会产生不同的结果，通常认为其值默认为 10，但是如果你的代码运行在过时的浏览器中，那么请在使用时总是显式地指定 radix。
    返回值
    返回解析后的整数值。 如果被解析参数的第一个字符无法被转化成数值类型，则返回 NaN。

    **注意：radix 参数为 n 将会把第一个参数看作是一个数的 n 进制表示，而返回的值则是十进制的。例如：**

    `parseInt('123', 5) //`将'123'看作 5 进制数，返回十进制数 38 => 1*5^2 + 2*5^1 + 3\*5^0 = 38

- 描述
  parseInt 函数将其第一个参数转换为字符串，解析它，并返回一个整数或 NaN。如果不是 NaN，返回的值将是作为指定基数（基数）中的数字的第一个参数的整数。

  例如：radix 参数为 10 将会把第一个参数看作是一个数的十进制表示，8 对应八进制，16 对应十六进制，等等。基数大于 10 时，用字母表中的字母来表示大于 9 的数字。例如十六进制中，使用 A 到 F。

  如果 parseInt 的字符不是指定基数中的数字，则忽略该字符和所有后续字符，并返回解析到该点的整数值。parseInt 将数字截断为整数值。允许使用前导空格和尾随空格。

  一些数中可能包含 e 字符（例如 6.022e23），使用 parseInt 去截取包含 e 字符数值部分会造成难以预料的结果。例如：

  ```
  parseInt("6.022e23", 10); // 返回 6
  parseInt(6.022e2, 10); // 返回 602
  ```

  parseInt 不应该用作 Math.floor()的替代品。

  - 如果 parseInt 遇到了不属于 radix 参数所指定的基数中的字符那么该字符和其后的字符都将被忽略。接着返回已经解析的整数部分。parseInt 将截取整数部分。开头和结尾的空白符允许存在，会被忽略。

  - 在基数为 undefined，或者基数为 0 或者没有指定的情况下，JavaScript 作如下处理：

    - 如果字符串 string 以"0x"或者"0X"开头, 则基数是 16 (16 进制).
    - 如果字符串 string 以"0"开头, 基数是 8（八进制）或者 10（十进制），那么具体是哪个基数由实现环境决定。ECMAScript 5 规定使用 10，但是并不是所有的浏览器都遵循这个规定。 因此，永远都要明确给出 radix 参数的值。
    - 如果字符串 string 以其它任何值开头，则基数是 10 (十进制)。
    - 如果第一个字符不能被转换成数字，parseInt 返回 NaN。

    算术上， NaN 不是任何一个进制下的数。 你可以调用 isNaN 来判断 parseInt 是否返回 NaN。NaN 参与的数学运算其结果总是 NaN。

    将整型数值以特定基数转换成它的字符串值可以使用 intValue.toString(radix).
